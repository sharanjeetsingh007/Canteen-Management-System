{"version":3,"sources":["services/wallets.service.js","views/admin/Wallets.js"],"names":["db","firestore","collection","WalletsDataService","item","add","id","value","doc","update","delete","uid","this","getAll","where","get","AllWallets","props","onDataChange","bind","state","wallets","unsubscribe","undefined","onSnapshot","items","forEach","data","push","username","total","payment","setState","getUser","fields","key","_classes","hover","striped","clickableRows","scopedSlots","color","style","width","onClick","e","window","prompt","parseInt","to","Component"],"mappings":"mMAEMA,E,OAAKC,EAAUC,WAAW,YAC1BC,E,sFACF,WACI,OAAOH,I,oBAGX,SAAOI,GACH,OAAOJ,EAAGK,IAAID,K,oBAGlB,SAAOE,EAAIC,GACP,OAAOP,EAAGQ,IAAIF,GAAIG,OAAOF,K,oBAG7B,SAAOD,GACH,OAAON,EAAGQ,IAAIF,GAAII,W,yBAGtB,SAAYC,GACR,OAAOC,KAAKC,SAASC,MAAM,MAAO,KAAMH,GAAKI,U,KAItC,QAAIZ,G,oJCXba,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACTC,QAAS,IAGb,EAAKC,iBAAcC,EAPJ,E,qDAUnB,WACIX,KAAKU,YAAcnB,IAAmBU,SACjCW,WAAWZ,KAAKM,gB,kCAGzB,WACIN,KAAKU,gB,0BAGT,SAAaG,GACT,IAAIJ,EAAU,GACdI,EAAMC,SAAQ,SAAAtB,GACV,IAAIE,EAAKF,EAAKE,GACVqB,EAAOvB,EAAKuB,OAEhBN,EAAQO,KAAK,CACTtB,GAAIA,EACJK,IAAKgB,EAAKhB,IACVkB,SAAUF,EAAKE,SACfC,MAAOH,EAAKG,MACZC,QAASJ,EAAKI,aAItBnB,KAAKoB,SAAS,CACVX,QAASA,M,oBAIjB,WAGI,OADaY,cAOT,eAAC,IAAD,WACI,cAAC,IAAD,0BAGA,cAAC,IAAD,UACI,cAAC,IAAD,CACIR,MAAOb,KAAKQ,MAAMC,QAClBa,OAAQ,CACJ,CAAEC,IAAK,WAAYC,SAAU,oBAC7B,QACA,UACA,UAEJC,OAAK,EACLC,SAAO,EACPC,eAAa,EACbC,YAAe,CACX,MACI,SAACpC,GAAD,OACI,mCAAMA,EAAK0B,UAEnB,OACI,SAAC1B,GAAD,OACI,6BACI,cAAC,IAAD,CAASqC,MAAM,OAAOC,MAAO,CAACC,MAAM,KAAMC,QAAS,SAACC,GAC5C,IAAMtC,EAAQuC,OAAOC,OAAO,+BACd,OAAVxC,GAAkByC,SAASzC,IAE3BJ,IAAmBM,OAAOL,EAAKE,GAAI,CAC/BK,IAAKP,EAAKO,IACVkB,SAAUzB,EAAKyB,SACfC,MAAOkB,SAAS5C,EAAK0B,OAASkB,SAASzC,GACvCwB,QAAS3B,EAAK2B,WAR9B,SAYI,wDAxCxB,cAAC,IAAD,CAAUkB,GAAG,e,GA9CRC,aAkGVlC","file":"static/js/17.914bf9ea.chunk.js","sourcesContent":["import { firestore } from \"../firebase\";\r\n\r\nconst db = firestore.collection(\"/wallets\");\r\nclass WalletsDataService {\r\n    getAll() {\r\n        return db;\r\n    }\r\n\r\n    create(item) {\r\n        return db.add(item);\r\n    }\r\n\r\n    update(id, value) {\r\n        return db.doc(id).update(value);\r\n    }\r\n\r\n    delete(id) {\r\n        return db.doc(id).delete();\r\n    }\r\n\r\n    getFromUser(uid) {\r\n        return this.getAll().where(\"uid\", \"==\", uid).get();\r\n    }\r\n}\r\n\r\nexport default new WalletsDataService();","import React, { Component } from 'react';\r\nimport WalletsDataService from '../../services/wallets.service';\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CDataTable,\r\n    CButton,\r\n} from '@coreui/react';\r\n\r\nimport CIcon from '@coreui/icons-react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getUser } from '../../common';\r\n\r\nclass AllWallets extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.onDataChange = this.onDataChange.bind(this);\r\n        this.state = {\r\n            wallets: [],\r\n        };\r\n\r\n        this.unsubscribe = undefined;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.unsubscribe = WalletsDataService.getAll()\r\n            .onSnapshot(this.onDataChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribe();\r\n    }\r\n\r\n    onDataChange(items) {\r\n        let wallets = [];\r\n        items.forEach(item => {\r\n            let id = item.id;\r\n            let data = item.data();\r\n            \r\n            wallets.push({\r\n                id: id,\r\n                uid: data.uid,\r\n                username: data.username,\r\n                total: data.total,\r\n                payment: data.payment,\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            wallets: wallets,\r\n        });\r\n    }\r\n\r\n    render ()\r\n    {\r\n        const user = getUser();\r\n        if (!user)\r\n        {\r\n            return (<Redirect to=\"/login\" />);\r\n        }\r\n\r\n        return (\r\n            <CCard>\r\n                <CCardHeader>\r\n                    All Wallets\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    <CDataTable\r\n                        items={this.state.wallets}\r\n                        fields={[\r\n                            { key: 'username', _classes: 'font-weight-bold' },\r\n                            'total', \r\n                            'payment', \r\n                            'action'\r\n                        ]}\r\n                        hover\r\n                        striped\r\n                        clickableRows\r\n                        scopedSlots = {{\r\n                            'total':\r\n                                (item) => (\r\n                                    <td>${item.total}</td>\r\n                                ),\r\n                            'action':\r\n                                (item)=>(\r\n                                    <td>\r\n                                        <CButton color='info' style={{width:120}} onClick={(e) => {\r\n                                                const value = window.prompt(\"Input the value to charge: \");\r\n                                                if (value !== null && parseInt(value))\r\n                                                {\r\n                                                    WalletsDataService.update(item.id, {\r\n                                                        uid: item.uid,\r\n                                                        username: item.username,\r\n                                                        total: parseInt(item.total) + parseInt(value),\r\n                                                        payment: item.payment,\r\n                                                    });\r\n                                                }\r\n                                            }}>\r\n                                            <small>Charge</small>\r\n                                        </CButton>\r\n                                    </td>\r\n                                ),\r\n                            }}\r\n                        />\r\n                </CCardBody>\r\n            </CCard>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AllWallets;"],"sourceRoot":""}