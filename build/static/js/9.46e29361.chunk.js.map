{"version":3,"sources":["services/wallets.service.js","services/products.service.js","services/orders.service.js","views/admin/TodayMenu.js"],"names":["db","firestore","collection","WalletsDataService","item","add","id","value","doc","update","delete","uid","this","getAll","where","get","ProductsDataService","products","OrdersDataService","TodayMenu","props","handleInputFocus","e","setState","focus","target","name","handleInputChange","refreshList","bind","refreshCartCount","setActiveProduct","onDataChange","state","currentProduct","currentIndex","cartcount","getCartCount","carts","totalPrice","showCart","showPayment","cvc","expiry","number","isPayPal","isCreditCard","unsubscribe","undefined","orderBy","onSnapshot","items","forEach","data","push","category","price","imgurl","description","trending","product","index","user","getUser","withSubheader","className","onClick","getCartItem","getTotalPrice","size","shape","color","map","xl","src","alt","addProductToCart","show","onClose","closeButton","fields","key","_classes","hover","striped","clickableRows","scopedSlots","total","style","padding","removeProductFromCart","pid","console","log","margin","variant","onChange","checked","htmlFor","xs","sm","focused","placeholder","required","onFocus","create","username","displayName","date","moment","format","status","order","getCartsToString","totalP","then","querySnapshot","catch","error","removeAllProductFromCart","href","rel","to","Component"],"mappings":"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","file":"static/js/9.46e29361.chunk.js","sourcesContent":["import { firestore } from \"../firebase\";\r\n\r\nconst db = firestore.collection(\"/wallets\");\r\nclass WalletsDataService {\r\n    getAll() {\r\n        return db;\r\n    }\r\n\r\n    create(item) {\r\n        return db.add(item);\r\n    }\r\n\r\n    update(id, value) {\r\n        return db.doc(id).update(value);\r\n    }\r\n\r\n    delete(id) {\r\n        return db.doc(id).delete();\r\n    }\r\n\r\n    getFromUser(uid) {\r\n        return this.getAll().where(\"uid\", \"==\", uid).get();\r\n    }\r\n}\r\n\r\nexport default new WalletsDataService();","import { firestore } from \"../firebase\";\r\n\r\nconst db = firestore.collection(\"/products\");\r\nclass ProductsDataService {\r\n    getAll() {\r\n        return db;\r\n    }\r\n\r\n    create(products) {\r\n        return db.add(products);\r\n    }\r\n\r\n    update(id, value) {\r\n        return db.doc(id).update(value);\r\n    }\r\n\r\n    delete(id) {\r\n        return db.doc(id).delete();\r\n    }\r\n}\r\n\r\nexport default new ProductsDataService();","import { firestore } from \"../firebase\";\r\n\r\nconst db = firestore.collection(\"/orders\");\r\nclass OrdersDataService {\r\n    getAll() {\r\n        return db;\r\n    }\r\n\r\n    create(item) {\r\n        return db.add(item);\r\n    }\r\n\r\n    update(id, value) {\r\n        return db.doc(id).update(value);\r\n    }\r\n\r\n    delete(id) {\r\n        return db.doc(id).delete();\r\n    }\r\n}\r\n\r\nexport default new OrdersDataService();","import React, { Component } from 'react'\r\nimport Cards from 'react-credit-cards';\r\nimport moment from 'moment';\r\nimport {\r\n    CButton,\r\n    CCol,\r\n    CBadge,\r\n    CJumbotron,\r\n    CRow,\r\n    CImg,\r\n    CHeaderNav,\r\n    CHeader,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CDataTable,\r\n    CFormGroup,\r\n    CInput,\r\n    CInputRadio,\r\n    CLink,\r\n    CLabel,\r\n    CDropdownToggle\r\n} from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ProductsDataService from '../../services/products.service';\r\nimport OrdersDataService from '../../services/orders.service';\r\nimport WalletsDataService from '../../services/wallets.service';\r\n\r\nimport { \r\n    addProductToCart, \r\n    getCartCount, \r\n    removeAllProductFromCart, \r\n    getCartItem,\r\n    getTotalPrice,\r\n    getCartsToString,\r\n    removeProductFromCart\r\n} from '../../common';\r\n\r\nimport { getUser } from '../../common';\r\n\r\nclass TodayMenu extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.refreshList = this.refreshList.bind(this);\r\n        this.refreshCartCount = this.refreshCartCount.bind(this);\r\n        this.setActiveProduct = this.setActiveProduct.bind(this);\r\n        this.onDataChange = this.onDataChange.bind(this);\r\n        this.handleInputFocus = this.handleInputFocus.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.state = {\r\n            products: [],\r\n            currentProduct: null,\r\n            currentIndex: -1,\r\n            cartcount: getCartCount(),\r\n            carts: [],\r\n            totalPrice: 0,\r\n            showCart: false,\r\n            showPayment: false,\r\n            cvc: '',\r\n            expiry: '',\r\n            focus: '',\r\n            name: '',\r\n            number: '',\r\n            isPayPal: false,\r\n            isCreditCard: false,\r\n        };\r\n\r\n        this.unsubscribe = undefined;\r\n    }\r\n\r\n\r\n\r\n    refreshCartCount() {\r\n        this.setState({\r\n            cartcount: getCartCount()\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.unsubscribe = ProductsDataService.getAll()\r\n        .orderBy(\"trending\", \"desc\")\r\n        .onSnapshot(this.onDataChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribe();\r\n    }\r\n\r\n    onDataChange(items) {\r\n        let products = [];\r\n        items.forEach(item => {\r\n            let id = item.id;\r\n            let data = item.data();\r\n            products.push({\r\n                id: id,\r\n                category: data.category,\r\n                name: data.name,\r\n                price: data.price,\r\n                imgurl: data.imgurl,\r\n                description: data.description,\r\n                trending: data.trending\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            products: products\r\n        });\r\n    }\r\n\r\n    refreshList() {\r\n        this.setState({\r\n            currentProduct: null,\r\n            currentIndex: -1\r\n        });\r\n    }\r\n\r\n    setActiveProduct(product, index) {\r\n        this.setState({\r\n            currentProduct: product,\r\n            currentIndex: index,\r\n        });\r\n    }\r\n\r\n    handleInputFocus = (e) => {\r\n        this.setState({ focus: e.target.name });\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        const {name, value} = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    render() \r\n    {\r\n        const user = getUser();\r\n        if (!user)\r\n        {\r\n            return (<Redirect to=\"/login\" />);\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <CHeader withSubheader>  \r\n                <CHeaderNav className=\"px-3\">\r\n                    <CButton\r\n                        onClick={()=>{ \r\n                            this.setState({\r\n                                showCart: true,\r\n                                carts: getCartItem(),\r\n                                totalPrice: getTotalPrice()\r\n                            });\r\n                    }}>\r\n                        <CIcon name=\"cil-cart\" size=\"2xl\" /><CBadge shape=\"pill\" color=\"info\" >{this.state.cartcount}</CBadge>                                \r\n                    </CButton>\r\n                </CHeaderNav>\r\n            </CHeader>\r\n            \r\n            <CJumbotron className=\"background-main\">\r\n                <div className=\"container-fluid text-center\">\r\n                    <h1 className=\"display-x text-white hero-h1\">Bistrot Français</h1>\r\n                    <p className=\"text-white\">We are closed for the moment, but we will still deliver food at your place!</p>\r\n                    <CButton className=\"menu-background\" size=\"lg\">View Today's Menu</CButton>\r\n                </div>\r\n            </CJumbotron>\r\n            {this.state.products.map((data, id) => {\r\n                return (   \r\n                    <CRow key={id}>\r\n                        <CCol xl={8}>\r\n                            <div className=\"item row align-items-center\">\r\n                                <div className=\"col-sm-2 pr-5\">\r\n                                    {data.imgurl && <img className=\"product-img\" src={data.imgurl} alt=\"\" />}\r\n                                </div>\r\n                                <div className=\"details col-sm-10\">\r\n                                    <div className=\"item__header\">\r\n                                        <h3 className=\"item__title\">{data.name}({data.category})</h3>\r\n                                        {data.trending === true && \r\n                                            <CBadge color=\"danger\">Trending</CBadge>\r\n                                        }\r\n                                        <span className=\"item__dots\"></span>\r\n                                        <span className=\"item__price\">${data.price}</span>\r\n                                    </div>\r\n                                    <p className=\"item__description\">{data.description}</p>\r\n                                    <CButton className=\"btn btn-sm btn-outline-primary my-cart-btn\" onClick={(e) => {\r\n                                                    addProductToCart(data.id, data.name, data.price, data.imgurl);\r\n                                                    this.setState({\r\n                                                        cartcount: getCartCount()\r\n                                                    });\r\n                                                }}>Add to cart</CButton>\r\n                                </div>\r\n                            </div>\r\n                        </CCol>\r\n                    </CRow>\r\n                );\r\n            })}\r\n            \r\n            \r\n            <CModal show={this.state.showCart} onClose={() => this.setState({\r\n                                showCart: !this.state.showCart\r\n                            })} color=\"info\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>My Cart</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                     <CDataTable items={this.state.carts}\r\n                        fields={['imgurl', { key: 'name', _classes: 'font-weight-bold' }, 'price', 'count', 'total', '']}\r\n                        hover striped clickableRows\r\n                        scopedSlots = {{\r\n                            'imgurl': (item) => (\r\n                                <td>{\r\n                                    item.imgurl !== \"\" &&\r\n                                    <div className=\"cart-img\">\r\n                                        <CImg src={item.imgurl} className=\"cart-img\" />\r\n                                    </div>\r\n                                }</td>\r\n                            ),\r\n                            \r\n                            'price': (item) => (\r\n                                <td>\r\n                                    ${item.price}\r\n                                </td>\r\n                            ),\r\n                            \r\n                            'total': (item) => (\r\n                                <td>\r\n                                    ${item.total}\r\n                                </td>\r\n                            ),\r\n\r\n                            '': (item) => (\r\n                                <td>\r\n                                    <CButton color='danger' style={{height:36}, {padding:2}} onClick={(e) => {\r\n                                                    removeProductFromCart(item.pid);\r\n                                                    console.log(item.pid);\r\n                                                    this.setState({\r\n                                                        showCart: true,\r\n                                                        carts: getCartItem(),\r\n                                                        totalPrice: getTotalPrice(),\r\n                                                        cartcount: getCartCount()\r\n                                                    });\r\n                                                }}>\r\n                                        <small>Remove</small>\r\n                                    </CButton>\r\n                                </td>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <CRow>\r\n                        <CCol xl={12}>\r\n                            <h5>Total Price: ${this.state.totalPrice}</h5>\r\n                        </CCol>\r\n                    </CRow>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => this.setState({\r\n                                showCart: false\r\n                            })}>\r\n                        Close\r\n                    </CButton>\r\n                    { getCartCount() > 0 &&\r\n                        <CButton color=\"info\" onClick={() => {\r\n                                    this.setState({\r\n                                        showCart: false,\r\n                                        showPayment: true\r\n                                    });\r\n                                }}>\r\n                            Checkout\r\n                        </CButton>\r\n                    }\r\n                </CModalFooter>\r\n            </CModal>\r\n            \r\n            <CModal show={this.state.showPayment} size=\"lg\"\r\n                    onClose={() => this.setState({\r\n                        showPayment: !this.state.showPayment\r\n                    })} \r\n                    color=\"info\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>Payment</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CFormGroup style={{margin: 10}}>\r\n                    <CRow>\r\n                        <CFormGroup variant=\"checkbox\"  style={{margin: 10}}>\r\n                            <CInputRadio className=\"form-check-input\" id=\"creditcard\" \r\n                                    name=\"payment\" value=\"creditcart\"\r\n                                    onChange={(e) => {\r\n                                        if(e.target.checked)\r\n                                        {\r\n                                            this.setState({\r\n                                                isPayPal: false,\r\n                                                isCreditCard: true\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                    />\r\n                            <CLabel variant=\"checkbox\" htmlFor=\"radio\">Credit Card</CLabel>\r\n                        </CFormGroup>\r\n                    </CRow>\r\n                    <CRow>\r\n                    <CCol xs=\"10\" sm=\"6\">\r\n                        <Cards cvc={ this.state.cvc }\r\n                                expiry={this.state.expiry}\r\n                                focused={this.state.focus}\r\n                                name={this.state.name}\r\n                                number={this.state.number}\r\n                        />\r\n                    </CCol>\r\n                    <CCol xs=\"10\" sm=\"6\">\r\n                        <CRow>\r\n                            <CCol xs=\"12\">\r\n                                <CFormGroup>\r\n                                    <CInput id=\"number\" name=\"number\" placeholder=\"Card Number\" required \r\n                                                onChange={this.handleInputChange}\r\n                                                onFocus={this.handleInputFocus}\r\n                                                />\r\n                                    <CLabel color=\"gray\">E.g.: 49..., 51..., 36..., 37...</CLabel>\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow>\r\n                            <CCol xs=\"12\">\r\n                                <CFormGroup>\r\n                                    <CInput id=\"name\" name=\"name\" placeholder=\"Name\" required\r\n                                                onChange={this.handleInputChange}\r\n                                                onFocus={this.handleInputFocus}\r\n                                                />\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow>\r\n                            <CCol xs=\"7\">\r\n                                <CFormGroup>\r\n                                    <CInput id=\"expiry\" name=\"expiry\" placeholder=\"Valid Thru\" required \r\n                                                onChange={this.handleInputChange}\r\n                                                onFocus={this.handleInputFocus}\r\n                                                />\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                            <CCol xs=\"5\">\r\n                                <CFormGroup>\r\n                                    <CInput id=\"cvc\" name=\"cvc\" placeholder=\"CVC\" required\r\n                                                onChange={this.handleInputChange}\r\n                                                onFocus={this.handleInputFocus}\r\n                                                />\r\n                                </CFormGroup>\r\n                            </CCol>\r\n                        </CRow>\r\n                    </CCol>\r\n                    </CRow>\r\n                    <CRow>\r\n                        <CFormGroup variant=\"checkbox\"  style={{margin: 10}}>\r\n                            <CInputRadio className=\"form-check-input\" id=\"paypal\" \r\n                                name=\"payment\" value=\"paypal\" \r\n                                onChange={(e) => {\r\n                                    if(e.target.checked)\r\n                                        {\r\n                                            this.setState({\r\n                                                isPayPal: true,\r\n                                                isCreditCard: false\r\n                                            });\r\n                                        }\r\n                                }}\r\n                                />\r\n                            <CLabel variant=\"checkbox\" htmlFor=\"radio\">PayPal</CLabel>\r\n                        </CFormGroup>\r\n                    </CRow>\r\n                    </CFormGroup>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => this.setState({\r\n                                showPayment: false\r\n                            })}>\r\n                        Close\r\n                    </CButton>\r\n\r\n                    {this.state.isCreditCard && !this.state.isPayPal &&\r\n                        <CButton color=\"info\" onClick={() => {\r\n                                    this.setState({\r\n                                        showCart: false,\r\n                                        showPayment: false\r\n                                    });\r\n                                    \r\n                                    OrdersDataService.create({\r\n                                        uid: user.uid,\r\n                                        username: user.displayName,\r\n                                        date: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\r\n                                        status: 'pending',\r\n                                        total: getTotalPrice(),\r\n                                        order: getCartsToString()\r\n                                    });\r\n\r\n                                    var totalP = getTotalPrice();\r\n                                    WalletsDataService.getAll()\r\n                                    .where('uid', '==', user.uid).get()\r\n                                    .then(function(querySnapshot) {\r\n                                        querySnapshot.forEach(function(doc) {\r\n                                            console.log(doc.id, \" => \", doc.data());\r\n                                            var item = doc.data();\r\n                                            item.total -= totalP;\r\n                                            console.log(item);\r\n                                            WalletsDataService.update(doc.id, item); \r\n                                        });\r\n                                    })\r\n                                    .catch(function(error) {\r\n                                        console.log(\"Error getting documents: \", error);\r\n                                    });\r\n\r\n                                    removeAllProductFromCart();\r\n                                    this.refreshCartCount();\r\n                                }}>\r\n                            Pay\r\n                        </CButton>\r\n                    }\r\n                    {!this.state.isCreditCard && this.state.isPayPal &&\r\n                        <CLink \r\n                            href='https://www.paypal.com'\r\n                            rel=\"noreferrer noopener\" \r\n                            target=\"_blank\" \r\n                            className=\"card-header-action\"  \r\n                        >\r\n                            <CButton color=\"info\" onClick={() => {\r\n                                        this.setState({\r\n                                            showCart: false,\r\n                                            showPayment: false\r\n                                        });\r\n\r\n                                        removeAllProductFromCart();\r\n                                        this.setState({\r\n                                            cartcount: getCartCount()\r\n                                        });\r\n                                    }}>\r\n                                PayPal\r\n                            </CButton>\r\n                        </CLink>\r\n                    }\r\n                </CModalFooter>\r\n            </CModal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodayMenu\r\n"],"sourceRoot":""}